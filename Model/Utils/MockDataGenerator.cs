using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MedLab.Model.MedLabTypes;
using MySql.Data.MySqlClient;

namespace MedLab.Model.Utils
{
    public class MockDataGenerator
    {
        public MedLabData GenerateData(bool validTestTypes)
        {
            string str = ConfigurationManager.ConnectionStrings["connectionString"].ToString();
            MySqlConnection connection = new MySqlConnection(str);

            MySqlCommand cmdLabs = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                " WHERE TABLE_SCHEMA = \"medlab\"" +
                " AND TABLE_NAME = \"laboratories\"", connection);
            MySqlCommand cmdTechs = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                " WHERE TABLE_SCHEMA = \"medlab\"" +
                " AND TABLE_NAME = \"technicians\"", connection);
            MySqlCommand cmdPatients = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                " WHERE TABLE_SCHEMA = \"medlab\"" +
                " AND TABLE_NAME = \"patients\"", connection);
            MySqlCommand cmdBatches = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                " WHERE TABLE_SCHEMA = \"medlab\"" +
                " AND TABLE_NAME = \"test_batches\"", connection);
            MySqlCommand cmdOrders = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                " WHERE TABLE_SCHEMA = \"medlab\"" +
                " AND TABLE_NAME = \"test_orders\"", connection);
            //MySqlCommand cmdResults = new MySqlCommand(
            //    "SELECT AUTO_INCREMENT" +
            //    " FROM information_schema.TABLES" +
            //    " WHERE TABLE_SCHEMA = \"medlab\"" +
            //    " AND TABLE_NAME = \"test_results\"", connection);
            MySqlCommand cmdType = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                " WHERE TABLE_SCHEMA = \"medlab\"" +
                " AND TABLE_NAME = \"test_types\"", connection);
            //MySqlCommand cmdNormal = new MySqlCommand(
            //    "SELECT AUTO_INCREMENT" +
            //    " FROM information_schema.TABLES" +
            //    " WHERE TABLE_SCHEMA = \"medlab\"" +
            //    " AND TABLE_NAME = \"test_normal_values\"", connection);
            //MySqlCommand cmdTestCollection = new MySqlCommand(
            //    "SELECT AUTO_INCREMENT" +
            //    " FROM information_schema.TABLES" +
            //    " WHERE TABLE_SCHEMA = \"medlab\"" +
            //    " AND TABLE_NAME = \"test_collections\"", connection);
            connection.Open();
            object cmdResult = cmdLabs.ExecuteScalar();
            int labID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            cmdResult = cmdTechs.ExecuteScalar();
            int techID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            cmdResult = cmdPatients.ExecuteScalar();
            int patientID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            cmdResult = cmdBatches.ExecuteScalar();
            int batchID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            cmdResult = cmdOrders.ExecuteScalar();
            int orderID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;

            cmdResult = cmdType.ExecuteScalar();
            int typeID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            //int resultID = Convert.ToInt32(cmdResults.ExecuteScalar());
            //int typeID = Convert.ToInt32(cmdType.ExecuteScalar());
            //int normalID = Convert.ToInt32(cmdNormal.ExecuteScalar());
            //int testCollectionID = Convert.ToInt32(cmdTestCollection.ExecuteScalar());
            connection.Close();

            RandomDataGenerator randomDataGenerator = new RandomDataGenerator();

            List<TestType> testTypes = new List<TestType>();
            List<TestCollection> testCollection = new List<TestCollection>();
            
            if (typeID != 1 && !validTestTypes)
            {
                throw new InvalidOperationException("There are values present in test_types, test_collection, test_normal_values.\n" +
                    "If they weren't generated by this program, INSERT statement will probably be invalid.");
            }
            (testTypes, testCollection) = randomDataGenerator.GetTestTypes();

            Random random = new Random();
            //labs
            int amountOfLabs = random.Next(1, 11);
            List<Laboratory> laboratories = new List<Laboratory>();
            for (int labsGenerated = 0; labsGenerated < amountOfLabs;)
            {
                string email = randomDataGenerator.GenerateEmail();
                string contactNumber = randomDataGenerator.GeneratePhoneNumber();
                string address = randomDataGenerator.GenerateAddress();
                bool validLabValues = true;
                for (int i = 0; i < laboratories.Count; i++)
                {
                    if (email == laboratories[i].Email)
                    {
                        validLabValues = false;
                        break;
                    }
                    if (contactNumber == laboratories[i].ContactNumber)
                    {
                        validLabValues = false;
                        break;
                    }
                    if (address == laboratories[i].Address)
                    {
                        validLabValues = false;
                        break;
                    }
                }
                if (!validLabValues)
                {
                    continue;
                }
                laboratories.Add(new Laboratory()
                {
                    LaboratoryID = labID,
                    Address = address,
                    Email = email,
                    ContactNumber = contactNumber,
                    Technicians = new List<Technician>()
                });
                labID++;
                labsGenerated++;
            }
            // techs for labs
            for (int i = 0; i < laboratories.Count; i++)
            {
                int amountOfTechnicians = random.Next(1, 5);
                for (int techniciansGenerated = 0; techniciansGenerated < amountOfTechnicians;)
                {
                    string fullName = randomDataGenerator.GenerateFullname();
                    string email = randomDataGenerator.GenerateEmail();
                    string contactNumber = randomDataGenerator.GeneratePhoneNumber();
                    bool validLabValues = true;
                    for (int j = 0; j < laboratories[i].Technicians.Count; j++)
                    {
                        if (email == laboratories[i].Technicians[j].Email)
                        {
                            validLabValues = false;
                            break;
                        }
                        if (contactNumber == laboratories[i].Technicians[j].ContactNumber)
                        {
                            validLabValues = false;
                            break;
                        }
                    }
                    if (!validLabValues)
                    {
                        continue;
                    }
                    laboratories[i].Technicians.Add(new Technician()
                    {
                        TechnicianID = techID,
                        FullName = fullName,
                        Email = email,
                        ContactNumber = contactNumber,
                        TestOrders = new List<TestOrder>()
                    });
                    techID++;
                    techniciansGenerated++;
                }
            }
            //patients
            int patientAmount = random.Next(10, 20);
            List<Patient> patients = new List<Patient>();
            for (int patientsGenerated = 0; patientsGenerated < patientAmount;)
            {
                string fullName = randomDataGenerator.GenerateFullname();
                char gender = randomDataGenerator.GenerateGender();
                DateTime dateOfBirth = randomDataGenerator.GenerateDate(new DateTime(1940, 1, 1), new DateTime(2024, 9, 1)).Date;
                string email = null;
                string contactNumber = null;
                string password = null;
                if (random.Next(0, 2) == 1)
                {
                    if (random.Next(0, 2) == 1)
                        email = randomDataGenerator.GenerateEmail();
                    else
                        contactNumber = randomDataGenerator.GeneratePhoneNumber();
                    password = randomDataGenerator.GeneratePassword();
                }

                patients.Add(new Patient()
                {
                    PatientID = patientID,
                    FullName = fullName,
                    Gender = gender,
                    DateOfBirth = dateOfBirth,
                    Email = email,
                    ContactNumber = contactNumber,
                    PatientPassword = password,
                    TestBatches = new List<TestBatch>()
                });
                patientID++;
                patientsGenerated++;
            }
            // batches
            foreach (Patient patient in patients)
            {
                int amountOfBatches = random.Next(1, 3);
                for (int i = 0; i < amountOfBatches; i++)
                {
                    char status = randomDataGenerator.GenerateBatchStatus();
                    DateTime timeOfCreation = randomDataGenerator.GenerateDateTime(new DateTime(2024, 9, 2), new DateTime(2024, 10, 1));
                    patient.TestBatches.Add(new TestBatch()
                    {
                        TestBatchID = batchID,
                        Status = status,
                        DateOfCreation = timeOfCreation,
                        TestOrders = new List<TestOrder>()
                    });
                    batchID++;
                }
            }
            // test order
            foreach (Patient patient in patients)
            {
                foreach (TestBatch batch in patient.TestBatches)
                {
                    int amountOfTests = random.Next(1, testTypes.Count);
                    for (int testsAdded = 0; testsAdded < amountOfTests;)
                    {
                        TestType testType = testTypes[random.Next(1, testTypes.Count)];
                        bool validLabValues = true;
                        for (int i = 0; i < batch.TestOrders.Count; i++)
                        {
                            if (batch.TestOrders[i].TestType == testType)
                            {
                                validLabValues = false;
                                break;
                            }
                        }
                        if (!validLabValues)
                            continue;
                        TestResult result = null;
                        if (batch.Status != 'q')
                        {
                            int patientAge = (int)(DateTime.Now - patient.DateOfBirth).TotalDays / 365;
                            TestNormalValues resultNormalValues = testTypes
                                .Find((x) => x == testType).TestNormalValues
                                .Find((x) =>
                                (x.Gender == patient.Gender) && patientAge >= x.MinAge && patientAge <= x.MaxAge);
                            double testResult = randomDataGenerator.RandomTestResult(resultNormalValues.MinResValue, resultNormalValues.MaxResValue);
                            DateTime dateOfTest = randomDataGenerator.GenerateDate(batch.DateOfCreation, DateTime.Now);
                            result = new TestResult()
                            {
                                TestResultID = orderID,
                                Result = testResult,
                                DateOfTest = dateOfTest
                            };
                        }
                        TestOrder order = new TestOrder()
                        {
                            TestOrderID = orderID,
                            TestType = testType,
                            TestResult = result
                        };
                        List<Technician> technicians = laboratories[random.Next(0, laboratories.Count)].Technicians;
                        technicians[random.Next(0, technicians.Count)].TestOrders.Add(order);
                        batch.TestOrders.Add(order);
                        orderID++;
                        testsAdded++;
                    }
                }
            }
            return new MedLabData(patients, laboratories, testTypes, testCollection);
        }
    }
}
