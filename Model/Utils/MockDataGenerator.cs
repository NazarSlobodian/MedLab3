using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MedLab.Model.DbModels;
using MySql.Data.MySqlClient;
using Mysqlx.Crud;
using MySqlX.XDevAPI;

namespace MedLab.Model.Utils
{
    public class MockDataGenerator
    {
        public async Task<MedLabData> GenerateData(GenerationAmounts generatedAmount, bool validTestTypes)
        {
            string dbName = "lab8db";
            string str = ConfigurationManager.ConnectionStrings["connectionString"].ToString();
            MySqlConnection connection = new MySqlConnection(str);

            MySqlCommand cmdCollectionPoints = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                $" WHERE TABLE_SCHEMA = \"{dbName}\"" +
                " AND TABLE_NAME = \"collection_points\"", connection);
            MySqlCommand cmdReceptionists = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                $" WHERE TABLE_SCHEMA = \"{dbName}\"" +
                " AND TABLE_NAME = \"receptionists\"", connection);
            MySqlCommand cmdPatients = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                $" WHERE TABLE_SCHEMA = \"{dbName}\"" +
                " AND TABLE_NAME = \"patients\"", connection);
            MySqlCommand cmdBatches = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                $" WHERE TABLE_SCHEMA = \"{dbName}\"" +
                " AND TABLE_NAME = \"test_batches\"", connection);
            MySqlCommand cmdOrders = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                $" WHERE TABLE_SCHEMA = \"{dbName}\"" +
                " AND TABLE_NAME = \"test_orders\"", connection);
            MySqlCommand cmdType = new MySqlCommand(
                "SELECT AUTO_INCREMENT" +
                " FROM information_schema.TABLES" +
                $" WHERE TABLE_SCHEMA = \"{dbName}\"" +
                " AND TABLE_NAME = \"test_types\"", connection);


            connection.Open();
            object cmdResult = cmdCollectionPoints.ExecuteScalar();
            int collectionPointId = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            cmdResult = cmdReceptionists.ExecuteScalar();
            int receptionistsID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            cmdResult = cmdPatients.ExecuteScalar();
            int patientID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            cmdResult = cmdBatches.ExecuteScalar();
            int batchID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;
            cmdResult = cmdOrders.ExecuteScalar();
            int orderID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;

            cmdResult = cmdType.ExecuteScalar();
            int typeID = (cmdResult != DBNull.Value && cmdResult != null) ? Convert.ToInt32(cmdResult) : 1;

            connection.Close();

            RandomDataGenerator randomDataGenerator = new RandomDataGenerator();

            List<TestType> testTypes = new List<TestType>();
            List<TestPanel> testCollection = new List<TestPanel>();
            bool newTypes = false;
            if (typeID != 1 && !validTestTypes)
            {
                throw new InvalidOperationException("There are values present in test_types, test_collection, test_normal_values.\n" +
                    "If they weren't generated by this program, INSERT statement will probably be invalid.");
            }
            if (typeID == 1)
            {
                newTypes = true;
                (testTypes, testCollection) = randomDataGenerator.GetDefaultTestTypes();
            }
            else
            {
                (testTypes, testCollection) = await RandomDataGenerator.GetDbTestTypes();
            }
            Random random = new Random();
            //collectionPoints
            int amountOfCollectionPoints = generatedAmount.collectionPointAmount;
            List<CollectionPoint> collectionPoints = new List<CollectionPoint>();
            for (int collectionPointsGenerated = 0; collectionPointsGenerated < amountOfCollectionPoints;)
            {
                string email = randomDataGenerator.GenerateEmail();
                string contactNumber = randomDataGenerator.GeneratePhoneNumber();
                string address = randomDataGenerator.GenerateAddress();
                bool validCollectionPointValues = true;
                for (int i = 0; i < collectionPoints.Count; i++)
                {
                    if (email == collectionPoints[i].Email)
                    {
                        validCollectionPointValues = false;
                        break;
                    }
                    if (contactNumber == collectionPoints[i].ContactNumber)
                    {
                        validCollectionPointValues = false;
                        break;
                    }
                    if (address == collectionPoints[i].Address)
                    {
                        validCollectionPointValues = false;
                        break;
                    }
                }
                if (!validCollectionPointValues)
                {
                    continue;
                }
                collectionPoints.Add(new CollectionPoint()
                {
                    CollectionPointId = collectionPointId,
                    Address = address,
                    Email = email,
                    ContactNumber = contactNumber,
                    Receptionists = new List<Receptionist>()
                });
                collectionPointId++;
                collectionPointsGenerated++;
            }
            // receptionists for collection points
            for (int i = 0; i < collectionPoints.Count; i++)
            {
                int amountOfReceptionists = generatedAmount.receptionistsAmount;
                for (int receptionistsGenerated = 0; receptionistsGenerated < amountOfReceptionists;)
                {
                    string fullName = randomDataGenerator.GenerateFullname();
                    string email = randomDataGenerator.GenerateEmail();
                    string contactNumber = randomDataGenerator.GeneratePhoneNumber();
                    bool validLabValues = true;
                    for (int j = 0; j < collectionPoints[i].Receptionists.Count; j++)
                    {
                        if (email == collectionPoints[i].Receptionists.ElementAt(j).Email)
                        {
                            validLabValues = false;
                            break;
                        }
                        if (contactNumber == collectionPoints[i].Receptionists.ElementAt(j).ContactNumber)
                        {
                            validLabValues = false;
                            break;
                        }
                    }
                    if (!validLabValues)
                    {
                        continue;
                    }
                    collectionPoints[i].Receptionists.Add(new Receptionist()
                    {
                        ReceptionistId = receptionistsID,
                        FullName = fullName,
                        Email = email,
                        ContactNumber = contactNumber,
                        TestBatches = new List<TestBatch>()
                    });
                    receptionistsID++;
                    receptionistsGenerated++;
                }
            }
            //patients
            int patientAmount = generatedAmount.patientAmount;
            List<Patient> patients = new List<Patient>();
            for (int patientsGenerated = 0; patientsGenerated < patientAmount;)
            {
                string fullName = randomDataGenerator.GenerateFullname();
                string gender = randomDataGenerator.GenerateGender();
                DateTime dateOfBirth = randomDataGenerator.GenerateDate(new DateTime(1940, 1, 1), new DateTime(2024, 9, 1)).Date;
                string email = null;
                string contactNumber = null;
                string password = null;
                if (random.Next(0, 2) == 1)
                {
                    if (random.Next(0, 2) == 1)
                        email = randomDataGenerator.GenerateEmail();
                    else
                        contactNumber = randomDataGenerator.GeneratePhoneNumber();
                    password = randomDataGenerator.GeneratePassword();
                }

                patients.Add(new Patient()
                {
                    PatientId = patientID,
                    FullName = fullName,
                    Gender = gender,
                    DateOfBirth = DateOnly.FromDateTime(dateOfBirth),
                    Email = email,
                    ContactNumber = contactNumber,
                    TestBatches = new List<TestBatch>()
                });
                patientID++;
                patientsGenerated++;
            }
            // batches
            foreach (Patient patient in patients)
            {
                int amountOfBatches = generatedAmount.batchesPerPatient;
                for (int i = 0; i < amountOfBatches; i++)
                {
                    string status = randomDataGenerator.GenerateBatchStatus();
                    DateTime openingDate = new DateTime(2024, 1, 1);
                    DateTime start = patient.DateOfBirth.ToDateTime(TimeOnly.Parse("00:00 AM")) < openingDate ? openingDate : patient.DateOfBirth.ToDateTime(TimeOnly.Parse("00:00 AM")).AddMonths(1);

                    //DateTime timeOfCreation = randomDataGenerator.GenerateDateTime(new DateTime(2024, 9, 2), new DateTime(2024, 10, 1));
                    DateTime timeOfCreation = randomDataGenerator.GenerateDateTime(start, DateTime.UtcNow);
                    patient.TestBatches.Add(new TestBatch()
                    {
                        TestBatchId = batchID,
                        BatchStatus = status,
                        DateOfCreation = timeOfCreation,
                        TestOrders = new List<TestOrder>()
                    });
                    batchID++;
                }
            }
            // test order
            foreach (Patient patient in patients)
            {
                foreach (TestBatch batch in patient.TestBatches)
                {
                    List<Receptionist> receptionists = collectionPoints[random.Next(0, collectionPoints.Count)].Receptionists.ToList();
                    receptionists[random.Next(0, receptionists.Count)].TestBatches.Add(batch);
                    int amountOfTests = generatedAmount.ordersPerBatch;
                    int testTypeIndex = random.Next(1, testTypes.Count);
                    for (int testsAdded = 0; testsAdded < amountOfTests;)
                    {
                        TestType testType = testTypes[testTypeIndex];
                        bool validLabValues = true;
                        for (int i = 0; i < batch.TestOrders.Count; i++)
                        {
                            if (batch.TestOrders.ElementAt(i).TestType == testType)
                            {
                                validLabValues = false;
                                break;
                            }
                        }
                        if (!validLabValues)
                        {
                            testTypeIndex++;
                            if (testTypeIndex >= testTypes.Count)
                                testTypeIndex = 0;
                            continue;
                        }
                        TestResult result = null;
                        if (batch.BatchStatus != "queued")
                        {
                            int patientAge = (int)(DateTime.Now - patient.DateOfBirth.ToDateTime(TimeOnly.Parse("00:00 AM"))).TotalDays / 365;
                            double testResult = 0.0;
                            TestNormalValue resultNormalValues = testTypes
                                .Find((x) => x == testType).TestNormalValues.ToList()
                                .Find((x) =>
                                (x.Gender == patient.Gender) && patientAge >= x.MinAge && patientAge <= x.MaxAge);
                            if (resultNormalValues != null)
                            {
                                testResult = randomDataGenerator.RandomTestResult((double)resultNormalValues.MinResValue, (double)resultNormalValues.MaxResValue);
                            }
                            else
                            {
                                testResult = randomDataGenerator.RandomTestResult(0.0, 100.0);
                            }
                            DateTime dateOfTest = randomDataGenerator.GenerateDate(batch.DateOfCreation, batch.DateOfCreation.AddDays(5));
                            result = new TestResult()
                            {
                                TestOrderId = orderID,
                                Result = (decimal)testResult,
                                DateOfTest = DateOnly.FromDateTime(dateOfTest)
                            };
                        }
                        TestOrder order = new TestOrder()
                        {
                            TestOrderId = orderID,
                            TestType = testType,
                            TestResult = result
                        };

                        batch.TestOrders.Add(order);
                        orderID++;
                        testsAdded++;
                    }
                }
            }
            return new MedLabData(patients, collectionPoints, testTypes, testCollection, newTypes);
        }
    }
}
